**************************
IN ORDER TO "FINISH" THE DEAL:
******************************
*On the Technical page, you have to either create pages for each project (html files), or link the images with sections on the same page that contain a description and some images about the project.
*Contact link (mail) and other relevant social media links
*BoreDome could use some process images/gifs.

With that, a bit of styling, and this is done. Youtube videos should be centered and max width or smth, limit size so that they don't overflow.

*********************
NOTES FOR FURTHER "DEVELOPMENT"
*********************
-Expandable images when clicked (js code not working right now, will move on for the moment)

-Break points interesting for styling
------------------
/* Styles for desktop */
/* For screens 992px and above */
@media (min-width: 992px) {
    /* Desktop styles */
    /* ... */
}

/* Styles for tablets */
/* For screens between 768px and 991px */
@media (min-width: 768px) and (max-width: 991px) {
    /* Tablet styles */
    /* ... */
}

/* Styles for mobile */
/* For screens below 768px */
@media (max-width: 767px) {
    /* Mobile styles */
    /* ... */
}
-------------------
-CSS based on percentages

When working with responsive design, breakpoints aren't limited to pixels; you can utilize various units, including percentages, ems, rems, and viewport units (like vw and vh), to create responsive layouts based on relative sizes rather than fixed pixels.

For instance, you can use percentages or viewport units as breakpoints in media queries:

css

/* Styles for screens wider than 768 pixels */
@media (min-width: 768px) {
    /* Styles here */
}

/* Styles for screens smaller than 50% of the viewport width */
@media (max-width: 50%) {
    /* Styles here */
}

/* Styles for screens wider than 60% of the viewport height */
@media (min-height: 60vh) {
    /* Styles here */
}

------------------
-Lazy loading 

Technique used to defer the loading of non-critical resources on a web page, such as images or videos, until they are needed. It's particularly beneficial for web pages with a large number of images or content below the fold (content not immediately visible when the page loads).

The concept revolves around loading only the visible content initially and then loading additional content as the user scrolls down the page, improving the initial page load time and reducing unnecessary data consumption.

Implementing Lazy Loading:

You can use native browser functionality, JavaScript libraries, or frameworks to implement lazy loading. HTML5 introduces the loading="lazy" attribute for images, which browsers can use to lazy load images without additional JavaScript.

<img src="placeholder.jpg" data-src="actual-image.jpg" loading="lazy" alt="Description">
-----------------

